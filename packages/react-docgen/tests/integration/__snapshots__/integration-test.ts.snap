// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`integration > fixtures > processes component "class-without-id.tsx" without errors 1`] = `
[
  {
    "description": "",
    "methods": [],
    "props": {
      "value": {
        "description": "",
        "required": true,
        "tsType": {
          "name": "string",
        },
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "component_1.js" without errors 1`] = `
[
  {
    "description": "The is a component to test the document generation",
    "displayName": "Component",
    "methods": [],
  },
]
`;

exports[`integration > fixtures > processes component "component_2.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "button",
    "methods": [
      {
        "docblock": null,
        "modifiers": [
          "static",
          "get",
        ],
        "name": "displayName",
        "params": [],
        "returns": null,
      },
      {
        "docblock": null,
        "modifiers": [
          "static",
          "get",
        ],
        "name": "defaultProps",
        "params": [],
        "returns": null,
      },
    ],
    "props": {
      "type": {
        "defaultValue": {
          "computed": false,
          "value": "\\"primary\\"",
        },
        "required": false,
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "component_3.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "Test",
    "methods": [],
    "props": {
      "style": {
        "description": "",
        "required": false,
        "type": {
          "name": "object",
        },
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "component_4.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "Parent",
    "methods": [],
    "props": {
      "child": {
        "description": "",
        "required": true,
        "type": {
          "computed": true,
          "name": "shape",
          "value": "Child.propTypes",
        },
      },
      "childExact": {
        "description": "",
        "required": true,
        "type": {
          "computed": true,
          "name": "exact",
          "value": "Child.propTypes",
        },
      },
      "extendedChild": {
        "description": "",
        "required": true,
        "type": {
          "name": "shape",
          "value": {
            "adopted": {
              "name": "bool",
              "required": true,
            },
          },
        },
      },
      "extendedChildExact": {
        "description": "",
        "required": true,
        "type": {
          "name": "exact",
          "value": {
            "adopted": {
              "name": "bool",
              "required": true,
            },
          },
        },
      },
      "something": {
        "description": "",
        "required": true,
        "type": {
          "name": "string",
        },
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "component_5.js" without errors 1`] = `
[
  {
    "childContext": {
      "color": {
        "required": false,
        "type": {
          "name": "string",
        },
      },
    },
    "context": {
      "config": {
        "required": false,
        "type": {
          "name": "object",
        },
      },
    },
    "description": "",
    "displayName": "Button",
    "methods": [],
    "props": {
      "children": {
        "description": "",
        "required": true,
        "type": {
          "name": "string",
        },
      },
      "onClick": {
        "description": "",
        "required": false,
        "type": {
          "name": "func",
        },
      },
      "style": {
        "defaultValue": {
          "computed": false,
          "value": "{}",
        },
        "description": "",
        "required": false,
        "type": {
          "name": "object",
        },
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "component_6.js" without errors 1`] = `
[
  {
    "childContext": {
      "color": {
        "required": false,
        "type": {
          "name": "string",
        },
      },
    },
    "context": {
      "config": {
        "required": false,
        "type": {
          "name": "object",
        },
      },
    },
    "description": "",
    "displayName": "Button",
    "methods": [],
    "props": {
      "children": {
        "description": "",
        "required": true,
        "type": {
          "name": "string",
        },
      },
      "onClick": {
        "description": "",
        "required": false,
        "type": {
          "name": "func",
        },
      },
      "style": {
        "defaultValue": {
          "computed": false,
          "value": "{}",
        },
        "description": "",
        "required": false,
        "type": {
          "name": "object",
        },
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "component_7.js" without errors 1`] = `
[
  {
    "description": "The is a component to test the document generation",
    "displayName": "Component",
    "methods": [],
  },
]
`;

exports[`integration > fixtures > processes component "component_8.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "Parent",
    "methods": [
      {
        "docblock": null,
        "modifiers": [],
        "name": "onChangeSlider",
        "params": [
          {
            "name": "[min, max]",
            "optional": false,
            "type": null,
          },
        ],
        "returns": null,
      },
    ],
  },
]
`;

exports[`integration > fixtures > processes component "component_9.js" without errors 1`] = `
[
  {
    "description": "Should be recognized as component.",
    "displayName": "ExampleComponent",
    "methods": [],
  },
]
`;

exports[`integration > fixtures > processes component "component_10.js" without errors 1`] = `
[
  {
    "description": "React component that display current time at current location.",
    "displayName": "Clock",
    "methods": [
      {
        "description": "Update clock state with new time",
        "docblock": "Update clock state with new time",
        "modifiers": [],
        "name": "updateClock",
        "params": [],
        "returns": null,
      },
      {
        "description": "Parse current Date object",
        "docblock": "Parse current Date object

@returns {Object} currentTime
   @returns {int} currentTime.hour
   @returns {int} currentTime.minutes
   @returns {string} currentTime.ampm \\"am\\" or \\"pm\\"
   @returns {string} currentTime.dayOfWeek
   @returns {string} currentTime.month
   @returns {int} currentTime.date",
        "modifiers": [],
        "name": "getTime",
        "params": [],
        "returns": {
          "description": "currentTime",
          "type": {
            "name": "Object",
          },
        },
      },
      {
        "description": "Update current clock for every 1 second",
        "docblock": "Update current clock for every 1 second",
        "modifiers": [],
        "name": "setTimer",
        "params": [],
        "returns": null,
      },
    ],
    "props": {
      "title": {
        "description": "A text display current's user identity,
 \\"Nobody\\" if no one is detected in the background,
 \\"Hi, ..name\\" if an user is detected",
        "required": false,
        "type": {
          "name": "string",
        },
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "component_11.js" without errors 1`] = `
[
  {
    "composes": [
      "OtherProps",
    ],
    "description": "",
    "displayName": "MyComponent",
    "methods": [],
    "props": {
      "fooProp": {
        "description": "fooProp is spread in from a locally resolved type",
        "flowType": {
          "name": "string",
        },
        "required": false,
      },
      "prop1": {
        "description": "The first prop",
        "flowType": {
          "name": "string",
        },
        "required": true,
      },
      "prop2": {
        "description": "The second, covariant prop",
        "flowType": {
          "name": "number",
        },
        "required": true,
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "component_12.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "Paper",
    "methods": [],
    "props": {
      "anchorOrigin": {
        "defaultValue": {
          "computed": false,
          "value": "{
  vertical: 'top',
  horizontal: 'left',
}",
        },
        "description": "This is the point on the anchor where the popover's
\`anchorEl\` will attach to. This is not used when the
anchorReference is 'anchorPosition'.

Options:
vertical: [top, center, bottom];
horizontal: [left, center, right].",
        "flowType": {
          "name": "signature",
          "raw": "{
  horizontal: 'left' | 'center' | 'right' | number,
  vertical: 'top' | 'center' | 'bottom' | number,
}",
          "signature": {
            "properties": [
              {
                "key": "horizontal",
                "value": {
                  "elements": [
                    {
                      "name": "literal",
                      "value": "'left'",
                    },
                    {
                      "name": "literal",
                      "value": "'center'",
                    },
                    {
                      "name": "literal",
                      "value": "'right'",
                    },
                    {
                      "name": "number",
                    },
                  ],
                  "name": "union",
                  "raw": "'left' | 'center' | 'right' | number",
                  "required": true,
                },
              },
              {
                "key": "vertical",
                "value": {
                  "elements": [
                    {
                      "name": "literal",
                      "value": "'top'",
                    },
                    {
                      "name": "literal",
                      "value": "'center'",
                    },
                    {
                      "name": "literal",
                      "value": "'bottom'",
                    },
                    {
                      "name": "number",
                    },
                  ],
                  "name": "union",
                  "raw": "'top' | 'center' | 'bottom' | number",
                  "required": true,
                },
              },
            ],
          },
          "type": "object",
        },
        "required": false,
      },
      "children": {
        "description": "@ignore",
        "flowType": {
          "name": "Node",
        },
        "required": false,
      },
      "classes": {
        "description": "Useful to extend the style applied to components.",
        "flowType": {
          "name": "Object",
        },
        "required": false,
      },
      "component": {
        "defaultValue": {
          "computed": false,
          "value": "'div'",
        },
        "description": "The component used for the root node.
This currently has to be flow cast in defaultProps as of flow 0.59.0",
        "flowType": {
          "name": "ElementType",
        },
        "required": false,
      },
      "elevation": {
        "defaultValue": {
          "computed": false,
          "value": "2",
        },
        "description": "Shadow depth, corresponds to \`dp\` in the spec.
It's accepting values between 0 and 24 inclusive.",
        "flowType": {
          "name": "number",
        },
        "required": false,
      },
      "labelRowsPerPage": {
        "defaultValue": {
          "computed": false,
          "value": "'Rows per page:'",
        },
        "description": "Useful to customize the rows per page label. Invoked with a \`{ from, to, count, page }\`
object.",
        "flowType": {
          "name": "Node",
        },
        "required": false,
      },
      "timeout": {
        "defaultValue": {
          "computed": false,
          "value": "300",
        },
        "description": "The duration for the transition, in milliseconds.
You may specify a single timeout for all transitions, or individually with an object.

Set to 'auto' to automatically calculate transition time based on height.",
        "flowType": {
          "elements": [
            {
              "name": "number",
            },
            {
              "name": "signature",
              "raw": "{ enter?: number, exit?: number }",
              "signature": {
                "properties": [
                  {
                    "key": "enter",
                    "value": {
                      "name": "number",
                      "required": false,
                    },
                  },
                  {
                    "key": "exit",
                    "value": {
                      "name": "number",
                      "required": false,
                    },
                  },
                ],
              },
              "type": "object",
            },
            {
              "name": "literal",
              "value": "'auto'",
            },
          ],
          "name": "union",
          "raw": "number | { enter?: number, exit?: number } | 'auto'",
        },
        "required": false,
      },
      "transition": {
        "description": "Transition component.",
        "flowType": {
          "elements": [
            {
              "name": "unknown",
            },
          ],
          "name": "ComponentType",
          "raw": "ComponentType<*>",
        },
        "required": true,
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "component_13.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "Foo",
    "methods": [],
    "props": {
      "RootComponent": {
        "description": "",
        "flowType": {
          "name": "ReactElementType",
          "raw": "React.ElementType",
        },
        "required": false,
      },
      "align": {
        "description": "",
        "flowType": {
          "elements": [
            {
              "name": "literal",
              "value": "\\"left\\"",
            },
            {
              "name": "literal",
              "value": "\\"center\\"",
            },
            {
              "name": "literal",
              "value": "\\"right\\"",
            },
            {
              "name": "literal",
              "value": "\\"justify\\"",
            },
          ],
          "name": "union",
          "raw": "\\"left\\" | \\"center\\" | \\"right\\" | \\"justify\\"",
        },
        "required": false,
      },
      "capitalize": {
        "description": "",
        "flowType": {
          "name": "boolean",
        },
        "required": false,
      },
      "center": {
        "description": "",
        "flowType": {
          "name": "boolean",
        },
        "required": false,
      },
      "children": {
        "description": "",
        "flowType": {
          "name": "ReactNode",
          "raw": "React.Node",
        },
        "required": false,
      },
      "className": {
        "description": "",
        "flowType": {
          "name": "string",
        },
        "required": false,
      },
      "color": {
        "description": "",
        "flowType": {
          "name": "string",
        },
        "required": false,
      },
      "justify": {
        "description": "",
        "flowType": {
          "name": "boolean",
        },
        "required": false,
      },
      "leading": {
        "description": "",
        "flowType": {
          "elements": [
            {
              "name": "literal",
              "value": "\\"none\\"",
            },
            {
              "name": "literal",
              "value": "\\"tight\\"",
            },
            {
              "name": "literal",
              "value": "\\"normal\\"",
            },
            {
              "name": "literal",
              "value": "\\"loose\\"",
            },
          ],
          "name": "union",
          "raw": "\\"none\\" | \\"tight\\" | \\"normal\\" | \\"loose\\"",
        },
        "required": false,
      },
      "leadingLoose": {
        "description": "",
        "flowType": {
          "name": "boolean",
        },
        "required": false,
      },
      "leadingNone": {
        "description": "",
        "flowType": {
          "name": "boolean",
        },
        "required": false,
      },
      "leadingNormal": {
        "description": "",
        "flowType": {
          "name": "boolean",
        },
        "required": false,
      },
      "leadingTight": {
        "description": "",
        "flowType": {
          "name": "boolean",
        },
        "required": false,
      },
      "left": {
        "description": "",
        "flowType": {
          "name": "boolean",
        },
        "required": false,
      },
      "lowercase": {
        "description": "",
        "flowType": {
          "name": "boolean",
        },
        "required": false,
      },
      "muted": {
        "description": "",
        "flowType": {
          "name": "boolean",
        },
        "required": false,
      },
      "right": {
        "description": "",
        "flowType": {
          "name": "boolean",
        },
        "required": false,
      },
      "size": {
        "description": "",
        "flowType": {
          "name": "string",
        },
        "required": false,
      },
      "tracking": {
        "description": "",
        "flowType": {
          "elements": [
            {
              "name": "literal",
              "value": "\\"tight\\"",
            },
            {
              "name": "literal",
              "value": "\\"normal\\"",
            },
            {
              "name": "literal",
              "value": "\\"wide\\"",
            },
          ],
          "name": "union",
          "raw": "\\"tight\\" | \\"normal\\" | \\"wide\\"",
        },
        "required": false,
      },
      "trackingNormal": {
        "description": "",
        "flowType": {
          "name": "boolean",
        },
        "required": false,
      },
      "trackingTight": {
        "description": "",
        "flowType": {
          "name": "boolean",
        },
        "required": false,
      },
      "trackingWide": {
        "description": "",
        "flowType": {
          "name": "boolean",
        },
        "required": false,
      },
      "transform": {
        "description": "",
        "flowType": {
          "elements": [
            {
              "name": "literal",
              "value": "\\"lowercase\\"",
            },
            {
              "name": "literal",
              "value": "\\"uppercase\\"",
            },
            {
              "name": "literal",
              "value": "\\"capitalize\\"",
            },
          ],
          "name": "union",
          "raw": "\\"lowercase\\" | \\"uppercase\\" | \\"capitalize\\"",
        },
        "required": false,
      },
      "uppercase": {
        "description": "",
        "flowType": {
          "name": "boolean",
        },
        "required": false,
      },
      "wrap": {
        "description": "",
        "flowType": {
          "name": "boolean",
        },
        "required": false,
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "component_14.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "UncoloredView",
    "methods": [],
    "props": {
      "color": {
        "description": "",
        "flowType": {
          "name": "string",
          "nullable": true,
        },
        "required": false,
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "component_15.js" without errors 1`] = `
[
  {
    "composes": [
      "BarProps",
      "BarProps2",
      "BarProps3",
    ],
    "description": "",
    "displayName": "Foo",
    "methods": [],
    "props": {
      "other": {
        "description": "",
        "flowType": {
          "name": "literal",
          "value": "'a'",
        },
        "required": true,
      },
      "other2": {
        "description": "",
        "flowType": {
          "name": "literal",
          "value": "'b'",
        },
        "required": true,
      },
      "other3": {
        "description": "",
        "flowType": {
          "name": "literal",
          "value": "'c'",
        },
        "required": true,
      },
      "other4": {
        "description": "",
        "flowType": {
          "name": "literal",
          "value": "'g'",
        },
        "required": true,
      },
      "other5": {
        "description": "",
        "flowType": {
          "name": "literal",
          "value": "'f'",
        },
        "required": true,
      },
      "somePropOverride": {
        "description": "",
        "flowType": {
          "name": "literal",
          "value": "'baz'",
        },
        "required": true,
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "component_16.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "Foo",
    "methods": [],
    "props": {
      "bar": {
        "defaultValue": {
          "computed": false,
          "value": "null",
        },
        "description": "This does something.",
        "required": false,
        "type": {
          "name": "custom",
          "raw": "PropTypes.node",
        },
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "component_17.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "Foo",
    "methods": [],
    "props": {
      "exactProp": {
        "description": "",
        "required": false,
        "type": {
          "name": "exact",
          "value": {
            "c": {
              "description": "Comment for property c",
              "name": "string",
              "required": false,
            },
            "d": {
              "name": "number",
              "required": false,
            },
          },
        },
      },
      "oneOfTypeProp": {
        "description": "",
        "required": false,
        "type": {
          "name": "union",
          "value": [
            {
              "description": "Comment for type string",
              "name": "string",
            },
            {
              "name": "number",
            },
          ],
        },
      },
      "shapeProp": {
        "description": "",
        "required": false,
        "type": {
          "name": "shape",
          "value": {
            "a": {
              "description": "Comment for property a",
              "name": "string",
              "required": false,
            },
            "b": {
              "name": "number",
              "required": false,
            },
          },
        },
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "component_18.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "UncoloredView",
    "methods": [],
    "props": {
      "color": {
        "description": "",
        "flowType": {
          "name": "string",
          "nullable": true,
        },
        "required": false,
        "type": {
          "name": "string",
        },
      },
      "id": {
        "defaultValue": {
          "computed": false,
          "value": "'test-forward-ref-default'",
        },
        "description": "",
        "required": false,
        "type": {
          "name": "string",
        },
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "component_19.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "Component",
    "methods": [],
    "props": {
      "data": {
        "description": "",
        "flowType": {
          "elements": [
            {
              "name": "mixed",
            },
          ],
          "name": "Array",
          "raw": "Array<mixed>",
        },
        "required": false,
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "component_20.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "Button",
    "methods": [],
    "props": {
      "@computed#children": {
        "defaultValue": {
          "computed": false,
          "value": "\\"default\\"",
        },
        "description": "This is a test",
        "required": false,
        "type": {
          "name": "string",
        },
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "component_21.tsx" without errors 1`] = `
[
  {
    "description": "This is a typescript class component",
    "displayName": "TSComponent",
    "methods": [],
    "props": {
      "bar": {
        "description": "Required prop",
        "required": true,
        "tsType": {
          "name": "number",
        },
      },
      "baz": {
        "description": "Complex union prop",
        "required": true,
        "tsType": {
          "elements": [
            {
              "name": "number",
            },
            {
              "name": "signature",
              "raw": "{ enter?: number, exit?: number }",
              "signature": {
                "properties": [
                  {
                    "key": "enter",
                    "value": {
                      "name": "number",
                      "required": false,
                    },
                  },
                  {
                    "key": "exit",
                    "value": {
                      "name": "number",
                      "required": false,
                    },
                  },
                ],
              },
              "type": "object",
            },
            {
              "name": "literal",
              "value": "'auto'",
            },
          ],
          "name": "union",
          "raw": "number | { enter?: number, exit?: number } | 'auto'",
        },
      },
      "foo": {
        "description": "Optional prop",
        "required": false,
        "tsType": {
          "name": "string",
        },
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "component_22.tsx" without errors 1`] = `
[
  {
    "description": "This is a TypeScript function component",
    "displayName": "TSFunctionComponent",
    "methods": [],
    "props": {
      "align": {
        "description": "",
        "required": false,
        "tsType": {
          "elements": [
            {
              "name": "literal",
              "value": "\\"left\\"",
            },
            {
              "name": "literal",
              "value": "\\"center\\"",
            },
            {
              "name": "literal",
              "value": "\\"right\\"",
            },
            {
              "name": "literal",
              "value": "\\"justify\\"",
            },
          ],
          "name": "union",
          "raw": "\\"left\\" | \\"center\\" | \\"right\\" | \\"justify\\"",
        },
      },
      "center": {
        "description": "",
        "required": false,
        "tsType": {
          "name": "boolean",
        },
      },
      "justify": {
        "description": "",
        "required": false,
        "tsType": {
          "name": "boolean",
        },
      },
      "left": {
        "description": "",
        "required": false,
        "tsType": {
          "name": "boolean",
        },
      },
      "position": {
        "description": "position doc",
        "required": true,
        "tsType": {
          "name": "signature",
          "raw": "{
  /**
   * x coordinate doc
   */
  x: number,
  /**
   * y coordinate doc
   */
  y: number
}",
          "signature": {
            "properties": [
              {
                "description": "x coordinate doc",
                "key": "x",
                "value": {
                  "name": "number",
                  "required": true,
                },
              },
              {
                "description": "y coordinate doc",
                "key": "y",
                "value": {
                  "name": "number",
                  "required": true,
                },
              },
            ],
          },
          "type": "object",
        },
      },
      "right": {
        "description": "",
        "required": false,
        "tsType": {
          "name": "boolean",
        },
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "component_23.tsx" without errors 1`] = `
[
  {
    "composes": [
      "OtherProps",
    ],
    "description": "This is a typescript class component",
    "displayName": "TSComponent",
    "methods": [],
    "props": {
      "bar": {
        "description": "Required prop",
        "required": true,
        "tsType": {
          "name": "number",
        },
      },
      "baz": {
        "description": "Complex union prop",
        "required": true,
        "tsType": {
          "elements": [
            {
              "name": "number",
            },
            {
              "name": "signature",
              "raw": "{ enter?: number, exit?: number }",
              "signature": {
                "properties": [
                  {
                    "key": "enter",
                    "value": {
                      "name": "number",
                      "required": false,
                    },
                  },
                  {
                    "key": "exit",
                    "value": {
                      "name": "number",
                      "required": false,
                    },
                  },
                ],
              },
              "type": "object",
            },
            {
              "name": "literal",
              "value": "'auto'",
            },
          ],
          "name": "union",
          "raw": "number | { enter?: number, exit?: number } | 'auto'",
        },
      },
      "foo": {
        "description": "Optional prop",
        "required": false,
        "tsType": {
          "name": "string",
        },
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "component_24.js" without errors 1`] = `
[
  {
    "composes": [
      "OtherProps",
    ],
    "description": "This is a flow class component with an interface as props",
    "displayName": "FlowComponent",
    "methods": [],
    "props": {
      "bar": {
        "description": "Required prop",
        "flowType": {
          "name": "number",
        },
        "required": true,
      },
      "baz": {
        "description": "Complex union prop",
        "flowType": {
          "elements": [
            {
              "name": "number",
            },
            {
              "name": "signature",
              "raw": "{ enter?: number, exit?: number }",
              "signature": {
                "properties": [
                  {
                    "key": "enter",
                    "value": {
                      "name": "number",
                      "required": false,
                    },
                  },
                  {
                    "key": "exit",
                    "value": {
                      "name": "number",
                      "required": false,
                    },
                  },
                ],
              },
              "type": "object",
            },
            {
              "name": "literal",
              "value": "'auto'",
            },
          ],
          "name": "union",
          "raw": "number | { enter?: number, exit?: number } | 'auto'",
        },
        "required": true,
      },
      "foo": {
        "description": "Optional prop",
        "flowType": {
          "name": "string",
        },
        "required": false,
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "component_25.tsx" without errors 1`] = `
[
  {
    "description": "This is a typescript class component",
    "displayName": "TSComponent",
    "methods": [],
    "props": {
      "bar": {
        "description": "Required prop",
        "required": true,
        "tsType": {
          "elements": [
            {
              "name": "Child",
            },
          ],
          "name": "Array",
          "raw": "Array<X>",
        },
      },
      "baz": {
        "description": "Complex union prop",
        "required": true,
        "tsType": {
          "name": "number",
        },
      },
      "foo": {
        "description": "Optional prop",
        "required": false,
        "tsType": {
          "name": "Child",
        },
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "component_26.js" without errors 1`] = `
[
  {
    "description": "This is a typescript class component",
    "displayName": "FlowComponent",
    "methods": [],
    "props": {
      "bar": {
        "description": "Required prop",
        "flowType": {
          "elements": [
            {
              "name": "Child",
            },
          ],
          "name": "Array",
          "raw": "Array<X>",
        },
        "required": true,
      },
      "baz": {
        "description": "Complex union prop",
        "flowType": {
          "name": "number",
        },
        "required": true,
      },
      "foo": {
        "description": "Optional prop",
        "flowType": {
          "name": "Child",
        },
        "required": false,
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "component_27.tsx" without errors 1`] = `
[
  {
    "description": "This is a typescript class component",
    "displayName": "TSComponent",
    "methods": [
      {
        "description": "This is a method",
        "docblock": "This is a method",
        "modifiers": [],
        "name": "foo",
        "params": [
          {
            "name": "a",
            "optional": false,
            "type": {
              "name": "string",
            },
          },
        ],
        "returns": {
          "type": {
            "name": "string",
          },
        },
      },
      {
        "description": "This is a public method",
        "docblock": "This is a public method",
        "modifiers": [],
        "name": "bar",
        "params": [
          {
            "name": "a",
            "optional": false,
            "type": {
              "name": "string",
            },
          },
        ],
        "returns": {
          "type": {
            "name": "string",
          },
        },
      },
    ],
    "props": {
      "foo": {
        "description": "",
        "required": true,
        "tsType": {
          "name": "string",
        },
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "component_28.tsx" without errors 1`] = `
[
  {
    "description": "Example component description",
    "displayName": "ABC",
    "methods": [],
    "props": {
      "foo": {
        "defaultValue": {
          "computed": false,
          "value": "true",
        },
        "description": "Example prop description",
        "required": false,
        "tsType": {
          "name": "boolean",
        },
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "component_29.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "MyComponent",
    "methods": [],
    "props": {
      "prop": {
        "description": "",
        "flowType": {
          "name": "T",
        },
        "required": true,
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "component_30.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "MyComponent",
    "methods": [],
    "props": {
      "prop": {
        "description": "",
        "flowType": {
          "name": "string",
        },
        "required": true,
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "component_31.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "MyComponent",
    "methods": [],
    "props": {
      "prop": {
        "description": "",
        "flowType": {
          "name": "T",
        },
        "required": true,
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "component_32.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "Segments",
    "methods": [
      {
        "docblock": null,
        "modifiers": [],
        "name": "foo",
        "params": [
          {
            "name": "props",
            "optional": false,
            "type": {
              "alias": "Props",
              "name": "signature",
              "raw": "{
  segments: Array<T>,
}",
              "signature": {
                "properties": [
                  {
                    "key": "segments",
                    "value": {
                      "elements": [
                        {
                          "name": "T",
                        },
                      ],
                      "name": "Array",
                      "raw": "Array<T>",
                      "required": true,
                    },
                  },
                ],
              },
              "type": "object",
            },
          },
        ],
        "returns": null,
      },
    ],
    "props": {
      "segments": {
        "description": "",
        "flowType": {
          "elements": [
            {
              "name": "T",
            },
          ],
          "name": "Array",
          "raw": "Array<T>",
        },
        "required": true,
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "component_33.tsx" without errors 1`] = `
[
  {
    "description": "This is a typescript component with imported prop types",
    "displayName": "ImportedExtendedComponent",
    "methods": [],
    "props": {
      "bar": {
        "description": "",
        "required": true,
        "tsType": {
          "name": "number",
        },
      },
      "foo": {
        "description": "",
        "required": true,
        "tsType": {
          "name": "string",
        },
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "component_34.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "CustomButton",
    "methods": [],
    "props": {
      "children": {
        "description": "",
        "required": true,
        "type": {
          "name": "string",
        },
      },
      "color": {
        "description": "",
        "required": false,
        "type": {
          "name": "string",
        },
      },
      "onClick": {
        "description": "",
        "required": false,
        "type": {
          "name": "func",
        },
      },
      "style": {
        "description": "",
        "required": false,
        "type": {
          "name": "object",
        },
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "component_35.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "SuperCustomButton",
    "methods": [],
    "props": {
      "children": {
        "description": "",
        "required": true,
        "type": {
          "name": "string",
        },
      },
      "onClick": {
        "description": "",
        "required": false,
        "type": {
          "name": "func",
        },
      },
      "style": {
        "description": "",
        "required": false,
        "type": {
          "name": "object",
        },
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "component_36.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "SuperDuperCustomButton",
    "methods": [],
    "props": {
      "children": {
        "description": "",
        "required": true,
        "type": {
          "name": "string",
        },
      },
      "onClick": {
        "description": "",
        "required": false,
        "type": {
          "name": "func",
        },
      },
      "style": {
        "description": "",
        "required": false,
        "type": {
          "name": "object",
        },
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "component_37.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "SuperDuperCustomButton",
    "methods": [],
    "props": {
      "children": {
        "description": "",
        "required": true,
        "type": {
          "name": "string",
        },
      },
      "onClick": {
        "description": "",
        "required": false,
        "type": {
          "name": "func",
        },
      },
      "style": {
        "description": "",
        "required": false,
        "type": {
          "name": "object",
        },
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "component_38.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "SuperDuperCustomButton",
    "methods": [],
    "props": {
      "children": {
        "description": "",
        "required": true,
        "type": {
          "name": "string",
        },
      },
      "onClick": {
        "description": "",
        "required": false,
        "type": {
          "name": "func",
        },
      },
      "style": {
        "description": "",
        "required": false,
        "type": {
          "name": "object",
        },
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "component_39.tsx" without errors 1`] = `
[
  {
    "description": "This is a typescript component with imported prop types",
    "displayName": "ImportedComponent",
    "methods": [],
    "props": {
      "foo": {
        "description": "",
        "required": true,
        "tsType": {
          "name": "string",
        },
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "component_40.js" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "SuperDuperCustomButton",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": {
          "computed": true,
          "value": "Sizes.EXTRA_LARGE",
        },
        "description": "",
        "required": false,
        "type": {
          "computed": true,
          "name": "enum",
          "value": "Object.values(Sizes)",
        },
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "component_41.tsx" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "MyComponent",
    "methods": [],
    "props": {
      "value": {
        "description": "String value of a number",
        "required": false,
        "tsType": {
          "name": "STRING_VALS[number]",
          "raw": "typeof STRING_VALS[number]",
        },
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "component_42.js" without errors 1`] = `
[
  {
    "description": "",
    "methods": [],
    "props": {
      "foo": {
        "defaultValue": {
          "computed": false,
          "value": "'bar'",
        },
        "required": false,
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "component_43.tsx" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "MenuItem",
    "methods": [],
    "props": {
      "children": {
        "description": "Menu item contents.",
        "required": false,
        "type": {
          "name": "node",
        },
      },
      "classes": {
        "description": "Override or extend the styles applied to the component. See CSS API below for more details.",
        "required": false,
        "type": {
          "name": "object",
        },
      },
      "component": {
        "defaultValue": {
          "computed": false,
          "value": "'li'",
        },
        "required": false,
      },
      "disableGutters": {
        "defaultValue": {
          "computed": false,
          "value": "false",
        },
        "required": false,
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "flow-export-type.js" without errors 1`] = `
[
  {
    "description": "This is a Flow class component",
    "displayName": "FlowComponent",
    "methods": [
      {
        "docblock": null,
        "modifiers": [],
        "name": "foo",
        "params": [
          {
            "name": "a",
            "optional": false,
            "type": {
              "name": "string",
            },
          },
        ],
        "returns": {
          "type": {
            "name": "string",
          },
        },
      },
      {
        "docblock": null,
        "modifiers": [],
        "name": "bar",
        "params": [
          {
            "name": "a",
            "optional": false,
            "type": {
              "name": "string",
            },
          },
        ],
        "returns": {
          "type": {
            "name": "string",
          },
        },
      },
    ],
    "props": {
      "foo": {
        "description": "",
        "flowType": {
          "name": "string",
        },
        "required": true,
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "flow-import-type.js" without errors 1`] = `
[
  {
    "description": "This is a Flow component with imported prop types",
    "displayName": "ImportedComponent",
    "methods": [],
    "props": {
      "foo": {
        "description": "",
        "flowType": {
          "name": "string",
        },
        "required": true,
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "flow-spread-import-type.js" without errors 1`] = `
[
  {
    "description": "This is a Flow component with imported prop types",
    "displayName": "ImportedExtendedComponent",
    "methods": [],
    "props": {
      "bar": {
        "description": "",
        "flowType": {
          "name": "number",
        },
        "required": true,
      },
      "foo": {
        "description": "",
        "flowType": {
          "name": "string",
        },
        "required": true,
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "rnmbx-camera.tsx" without errors 1`] = `
[
  {
    "description": "Controls the perspective from which the user sees the map.

To use imperative methods, pass in a ref object:

\`\`\`tsx
const camera = useRef<Camera>(null);

useEffect(() => {
  camera.current?.setCamera({
    centerCoordinate: [lon, lat],
  });
}, []);

return (
  <Camera ref={camera} />
);
\`\`\`",
    "displayName": "Camera",
    "methods": [
      {
        "description": "Sets any camera properties, with default fallbacks if unspecified.",
        "docblock": "Sets any camera properties, with default fallbacks if unspecified.

@example
camera.current?.setCamera({
  centerCoordinate: [lon, lat],
});

@param {CameraStop | CameraStops} config",
        "modifiers": [],
        "name": "setCamera",
        "params": [],
        "returns": null,
      },
      {
        "description": "Set the camera position to enclose the provided bounds, with optional
padding and duration.",
        "docblock": "Set the camera position to enclose the provided bounds, with optional
padding and duration.

@example
camera.fitBounds([lon, lat], [lon, lat]);
camera.fitBounds([lon, lat], [lon, lat], [20, 0], 1000);

@param {Position} ne Northeast coordinate of bounding box
@param {Position} sw Southwest coordinate of bounding box
@param {number | number[]} paddingConfig The viewport padding, specified as a number (all sides equal), a 2-item array ([vertical, horizontal]), or a 4-item array ([top, right, bottom, left])
@param {number} animationDuration The transition duration",
        "modifiers": [],
        "name": "fitBounds",
        "params": [],
        "returns": null,
      },
      {
        "description": "Sets the camera to center around the provided coordinate using a realistic 'travel'
animation, with optional duration.",
        "docblock": "Sets the camera to center around the provided coordinate using a realistic 'travel'
animation, with optional duration.

@example
camera.flyTo([lon, lat]);
camera.flyTo([lon, lat], 12000);

 @param {Position} centerCoordinate The coordinate to center in the view
 @param {number} animationDuration The transition duration",
        "modifiers": [],
        "name": "flyTo",
        "params": [],
        "returns": null,
      },
      {
        "description": "Sets the camera to center around the provided coordinate, with optional duration.",
        "docblock": "Sets the camera to center around the provided coordinate, with optional duration.

@example
camera.moveTo([lon, lat], 200);
camera.moveTo([lon, lat]);

 @param {Position} centerCoordinate The coordinate to center in the view
 @param {number} animationDuration The transition duration",
        "modifiers": [],
        "name": "moveTo",
        "params": [],
        "returns": null,
      },
      {
        "description": "Zooms the camera to the provided level, with optional duration.",
        "docblock": "Zooms the camera to the provided level, with optional duration.

@example
camera.zoomTo(16);
camera.zoomTo(16, 100);

@param {number} zoomLevel The target zoom
@param {number} animationDuration The transition duration",
        "modifiers": [],
        "name": "zoomTo",
        "params": [],
        "returns": null,
      },
    ],
    "props": {
      "allowUpdates": {
        "description": "Whether the camera should send any configuration to the native module. Prevents unnecessary tile
fetching and improves performance when the map is not visible. Defaults to \`true\`.",
        "required": false,
        "tsType": {
          "name": "boolean",
        },
      },
      "animationDuration": {
        "description": "The duration the map takes to animate to a new configuration.",
        "required": false,
        "tsType": {
          "name": "number",
        },
      },
      "animationMode": {
        "description": "The easing or path the camera uses to animate to a new configuration.",
        "required": false,
        "tsType": {
          "elements": [
            {
              "name": "literal",
              "value": "'flyTo'",
            },
            {
              "name": "literal",
              "value": "'easeTo'",
            },
            {
              "name": "literal",
              "value": "'linearTo'",
            },
            {
              "name": "literal",
              "value": "'moveTo'",
            },
            {
              "name": "literal",
              "value": "'none'",
            },
          ],
          "name": "union",
          "raw": "| 'flyTo'
| 'easeTo'
| 'linearTo'
| 'moveTo'
| 'none'",
        },
      },
      "bounds": {
        "description": "The corners of a box around which the map should bound. Contains padding props for backwards
compatibility; the root \`padding\` prop should be used instead.",
        "required": false,
        "tsType": {
          "elements": [
            {
              "elements": [
                {
                  "name": "signature",
                  "raw": "{
  /** Left padding in points */
  paddingLeft: number;
  /** Right padding in points */
  paddingRight: number;
  /** Top padding in points */
  paddingTop: number;
  /** Bottom padding in points */
  paddingBottom: number;
}",
                  "signature": {
                    "properties": [
                      {
                        "description": "Left padding in points",
                        "key": "paddingLeft",
                        "value": {
                          "name": "number",
                          "required": true,
                        },
                      },
                      {
                        "description": "Right padding in points",
                        "key": "paddingRight",
                        "value": {
                          "name": "number",
                          "required": true,
                        },
                      },
                      {
                        "description": "Top padding in points",
                        "key": "paddingTop",
                        "value": {
                          "name": "number",
                          "required": true,
                        },
                      },
                      {
                        "description": "Bottom padding in points",
                        "key": "paddingBottom",
                        "value": {
                          "name": "number",
                          "required": true,
                        },
                      },
                    ],
                  },
                  "type": "object",
                },
              ],
              "name": "Partial",
              "raw": "Partial<CameraPadding>",
            },
            {
              "name": "signature",
              "raw": "{
  ne: Position;
  sw: Position;
}",
              "signature": {
                "properties": [
                  {
                    "key": "ne",
                    "value": {
                      "elements": [
                        {
                          "elements": [
                            {
                              "name": "number",
                            },
                          ],
                          "name": "Array",
                          "raw": "number[]",
                        },
                        {
                          "elements": [
                            {
                              "name": "number",
                            },
                            {
                              "name": "number",
                            },
                          ],
                          "name": "tuple",
                          "raw": "[number, number]",
                        },
                      ],
                      "name": "union",
                      "raw": "number[] | [number, number]",
                      "required": true,
                    },
                  },
                  {
                    "key": "sw",
                    "value": {
                      "elements": [
                        {
                          "elements": [
                            {
                              "name": "number",
                            },
                          ],
                          "name": "Array",
                          "raw": "number[]",
                        },
                        {
                          "elements": [
                            {
                              "name": "number",
                            },
                            {
                              "name": "number",
                            },
                          ],
                          "name": "tuple",
                          "raw": "[number, number]",
                        },
                      ],
                      "name": "union",
                      "raw": "number[] | [number, number]",
                      "required": true,
                    },
                  },
                ],
              },
              "type": "object",
            },
          ],
          "name": "intersection",
          "raw": "Partial<CameraPadding> & CameraBounds",
        },
      },
      "centerCoordinate": {
        "description": "The location on which the map should center.",
        "required": false,
        "tsType": {
          "elements": [
            {
              "elements": [
                {
                  "name": "number",
                },
              ],
              "name": "Array",
              "raw": "number[]",
            },
            {
              "elements": [
                {
                  "name": "number",
                },
                {
                  "name": "number",
                },
              ],
              "name": "tuple",
              "raw": "[number, number]",
            },
          ],
          "name": "union",
          "raw": "number[] | [number, number]",
        },
      },
      "defaultSettings": {
        "description": "The configuration that the camera falls back on, if no other values are specified.",
        "required": false,
        "tsType": {
          "name": "signature",
          "raw": "{
  /** Allows static check of the data type. For internal use only. */
  readonly type?: 'CameraStop';
  /** The location on which the map should center. */
  centerCoordinate?: Position;
  /** The corners of a box around which the map should bound. Contains padding props for backwards
   * compatibility; the root \`padding\` prop should be used instead. */
  bounds?: CameraBoundsWithPadding;
  /** The heading (orientation) of the map. */
  heading?: number;
  /** The pitch of the map. */
  pitch?: number;
  /** The zoom level of the map. */
  zoomLevel?: number;
  /** The viewport padding in points. */
  padding?: CameraPadding;
  /** The duration the map takes to animate to a new configuration. */
  animationDuration?: number;
  /** The easing or path the camera uses to animate to a new configuration. */
  animationMode?: CameraAnimationMode;
}",
          "signature": {
            "properties": [
              {
                "description": "Allows static check of the data type. For internal use only.",
                "key": "type",
                "value": {
                  "name": "literal",
                  "required": false,
                  "value": "'CameraStop'",
                },
              },
              {
                "description": "The location on which the map should center.",
                "key": "centerCoordinate",
                "value": {
                  "elements": [
                    {
                      "elements": [
                        {
                          "name": "number",
                        },
                      ],
                      "name": "Array",
                      "raw": "number[]",
                    },
                    {
                      "elements": [
                        {
                          "name": "number",
                        },
                        {
                          "name": "number",
                        },
                      ],
                      "name": "tuple",
                      "raw": "[number, number]",
                    },
                  ],
                  "name": "union",
                  "raw": "number[] | [number, number]",
                  "required": true,
                },
              },
              {
                "description": "The corners of a box around which the map should bound. Contains padding props for backwards
compatibility; the root \`padding\` prop should be used instead.",
                "key": "bounds",
                "value": {
                  "elements": [
                    {
                      "elements": [
                        {
                          "name": "signature",
                          "raw": "{
  /** Left padding in points */
  paddingLeft: number;
  /** Right padding in points */
  paddingRight: number;
  /** Top padding in points */
  paddingTop: number;
  /** Bottom padding in points */
  paddingBottom: number;
}",
                          "required": false,
                          "signature": {
                            "properties": [
                              {
                                "description": "Left padding in points",
                                "key": "paddingLeft",
                                "value": {
                                  "name": "number",
                                  "required": true,
                                },
                              },
                              {
                                "description": "Right padding in points",
                                "key": "paddingRight",
                                "value": {
                                  "name": "number",
                                  "required": true,
                                },
                              },
                              {
                                "description": "Top padding in points",
                                "key": "paddingTop",
                                "value": {
                                  "name": "number",
                                  "required": true,
                                },
                              },
                              {
                                "description": "Bottom padding in points",
                                "key": "paddingBottom",
                                "value": {
                                  "name": "number",
                                  "required": true,
                                },
                              },
                            ],
                          },
                          "type": "object",
                        },
                      ],
                      "name": "Partial",
                      "raw": "Partial<CameraPadding>",
                    },
                    {
                      "name": "signature",
                      "raw": "{
  ne: Position;
  sw: Position;
}",
                      "signature": {
                        "properties": [
                          {
                            "key": "ne",
                            "value": {
                              "elements": [
                                {
                                  "elements": [
                                    {
                                      "name": "number",
                                    },
                                  ],
                                  "name": "Array",
                                  "raw": "number[]",
                                },
                                {
                                  "elements": [
                                    {
                                      "name": "number",
                                    },
                                    {
                                      "name": "number",
                                    },
                                  ],
                                  "name": "tuple",
                                  "raw": "[number, number]",
                                },
                              ],
                              "name": "union",
                              "raw": "number[] | [number, number]",
                              "required": true,
                            },
                          },
                          {
                            "key": "sw",
                            "value": {
                              "elements": [
                                {
                                  "elements": [
                                    {
                                      "name": "number",
                                    },
                                  ],
                                  "name": "Array",
                                  "raw": "number[]",
                                },
                                {
                                  "elements": [
                                    {
                                      "name": "number",
                                    },
                                    {
                                      "name": "number",
                                    },
                                  ],
                                  "name": "tuple",
                                  "raw": "[number, number]",
                                },
                              ],
                              "name": "union",
                              "raw": "number[] | [number, number]",
                              "required": true,
                            },
                          },
                        ],
                      },
                      "type": "object",
                    },
                  ],
                  "name": "intersection",
                  "raw": "Partial<CameraPadding> & CameraBounds",
                  "required": false,
                },
              },
              {
                "description": "The heading (orientation) of the map.",
                "key": "heading",
                "value": {
                  "name": "number",
                  "required": false,
                },
              },
              {
                "description": "The pitch of the map.",
                "key": "pitch",
                "value": {
                  "name": "number",
                  "required": false,
                },
              },
              {
                "description": "The zoom level of the map.",
                "key": "zoomLevel",
                "value": {
                  "name": "number",
                  "required": false,
                },
              },
              {
                "description": "The viewport padding in points.",
                "key": "padding",
                "value": {
                  "name": "signature",
                  "raw": "{
  /** Left padding in points */
  paddingLeft: number;
  /** Right padding in points */
  paddingRight: number;
  /** Top padding in points */
  paddingTop: number;
  /** Bottom padding in points */
  paddingBottom: number;
}",
                  "required": false,
                  "signature": {
                    "properties": [
                      {
                        "description": "Left padding in points",
                        "key": "paddingLeft",
                        "value": {
                          "name": "number",
                          "required": true,
                        },
                      },
                      {
                        "description": "Right padding in points",
                        "key": "paddingRight",
                        "value": {
                          "name": "number",
                          "required": true,
                        },
                      },
                      {
                        "description": "Top padding in points",
                        "key": "paddingTop",
                        "value": {
                          "name": "number",
                          "required": true,
                        },
                      },
                      {
                        "description": "Bottom padding in points",
                        "key": "paddingBottom",
                        "value": {
                          "name": "number",
                          "required": true,
                        },
                      },
                    ],
                  },
                  "type": "object",
                },
              },
              {
                "description": "The duration the map takes to animate to a new configuration.",
                "key": "animationDuration",
                "value": {
                  "name": "number",
                  "required": false,
                },
              },
              {
                "description": "The easing or path the camera uses to animate to a new configuration.",
                "key": "animationMode",
                "value": {
                  "elements": [
                    {
                      "name": "literal",
                      "value": "'flyTo'",
                    },
                    {
                      "name": "literal",
                      "value": "'easeTo'",
                    },
                    {
                      "name": "literal",
                      "value": "'linearTo'",
                    },
                    {
                      "name": "literal",
                      "value": "'moveTo'",
                    },
                    {
                      "name": "literal",
                      "value": "'none'",
                    },
                  ],
                  "name": "union",
                  "raw": "| 'flyTo'
| 'easeTo'
| 'linearTo'
| 'moveTo'
| 'none'",
                  "required": false,
                },
              },
            ],
          },
          "type": "object",
        },
      },
      "followHeading": {
        "description": "The heading used when following the user location.",
        "required": false,
        "tsType": {
          "name": "number",
        },
      },
      "followPadding": {
        "description": "The padding used to position the user location when following.",
        "required": false,
        "tsType": {
          "elements": [
            {
              "name": "signature",
              "raw": "{
  /** Left padding in points */
  paddingLeft: number;
  /** Right padding in points */
  paddingRight: number;
  /** Top padding in points */
  paddingTop: number;
  /** Bottom padding in points */
  paddingBottom: number;
}",
              "signature": {
                "properties": [
                  {
                    "description": "Left padding in points",
                    "key": "paddingLeft",
                    "value": {
                      "name": "number",
                      "required": true,
                    },
                  },
                  {
                    "description": "Right padding in points",
                    "key": "paddingRight",
                    "value": {
                      "name": "number",
                      "required": true,
                    },
                  },
                  {
                    "description": "Top padding in points",
                    "key": "paddingTop",
                    "value": {
                      "name": "number",
                      "required": true,
                    },
                  },
                  {
                    "description": "Bottom padding in points",
                    "key": "paddingBottom",
                    "value": {
                      "name": "number",
                      "required": true,
                    },
                  },
                ],
              },
              "type": "object",
            },
          ],
          "name": "Partial",
          "raw": "Partial<CameraPadding>",
        },
      },
      "followPitch": {
        "description": "The pitch used when following the user location.",
        "required": false,
        "tsType": {
          "name": "number",
        },
      },
      "followUserLocation": {
        "description": "Whether the map orientation follows the user location.",
        "required": false,
        "tsType": {
          "name": "boolean",
        },
      },
      "followUserMode": {
        "description": "The mode used to track the user location on the map.",
        "required": false,
        "tsType": {
          "name": "UserTrackingMode",
        },
      },
      "followZoomLevel": {
        "description": "The zoom level used when following the user location.",
        "required": false,
        "tsType": {
          "name": "number",
        },
      },
      "heading": {
        "description": "The heading (orientation) of the map.",
        "required": false,
        "tsType": {
          "name": "number",
        },
      },
      "maxBounds": {
        "description": "The corners of a box defining the limits of where the camera can pan or zoom.",
        "required": false,
        "tsType": {
          "name": "signature",
          "raw": "{
  ne: Position;
  sw: Position;
}",
          "signature": {
            "properties": [
              {
                "key": "ne",
                "value": {
                  "elements": [
                    {
                      "elements": [
                        {
                          "name": "number",
                        },
                      ],
                      "name": "Array",
                      "raw": "number[]",
                    },
                    {
                      "elements": [
                        {
                          "name": "number",
                        },
                        {
                          "name": "number",
                        },
                      ],
                      "name": "tuple",
                      "raw": "[number, number]",
                    },
                  ],
                  "name": "union",
                  "raw": "number[] | [number, number]",
                  "required": true,
                },
              },
              {
                "key": "sw",
                "value": {
                  "elements": [
                    {
                      "elements": [
                        {
                          "name": "number",
                        },
                      ],
                      "name": "Array",
                      "raw": "number[]",
                    },
                    {
                      "elements": [
                        {
                          "name": "number",
                        },
                        {
                          "name": "number",
                        },
                      ],
                      "name": "tuple",
                      "raw": "[number, number]",
                    },
                  ],
                  "name": "union",
                  "raw": "number[] | [number, number]",
                  "required": true,
                },
              },
            ],
          },
          "type": "object",
        },
      },
      "maxZoomLevel": {
        "description": "The highest allowed zoom level.",
        "required": false,
        "tsType": {
          "name": "number",
        },
      },
      "minZoomLevel": {
        "description": "The lowest allowed zoom level.",
        "required": false,
        "tsType": {
          "name": "number",
        },
      },
      "onUserTrackingModeChange": {
        "description": "Executes when user tracking mode changes.",
        "required": false,
        "tsType": {
          "name": "signature",
          "raw": "(
  event: MapboxGLEvent<
    'usertrackingmodechange',
    {
      followUserLocation: boolean;
      followUserMode: UserTrackingMode | null;
    }
  >,
) => void",
          "signature": {
            "arguments": [
              {
                "name": "event",
                "type": {
                  "elements": [
                    {
                      "name": "literal",
                      "value": "'usertrackingmodechange'",
                    },
                    {
                      "name": "signature",
                      "raw": "{
  followUserLocation: boolean;
  followUserMode: UserTrackingMode | null;
}",
                      "signature": {
                        "properties": [
                          {
                            "key": "followUserLocation",
                            "value": {
                              "name": "boolean",
                              "required": true,
                            },
                          },
                          {
                            "key": "followUserMode",
                            "value": {
                              "elements": [
                                {
                                  "name": "UserTrackingMode",
                                },
                                {
                                  "name": "null",
                                },
                              ],
                              "name": "union",
                              "raw": "UserTrackingMode | null",
                              "required": true,
                            },
                          },
                        ],
                      },
                      "type": "object",
                    },
                  ],
                  "name": "MapboxGLEvent",
                  "raw": "MapboxGLEvent<
  'usertrackingmodechange',
  {
    followUserLocation: boolean;
    followUserMode: UserTrackingMode | null;
  }
>",
                },
              },
            ],
            "return": {
              "name": "void",
            },
          },
          "type": "function",
        },
      },
      "padding": {
        "description": "The viewport padding in points.",
        "required": false,
        "tsType": {
          "name": "signature",
          "raw": "{
  /** Left padding in points */
  paddingLeft: number;
  /** Right padding in points */
  paddingRight: number;
  /** Top padding in points */
  paddingTop: number;
  /** Bottom padding in points */
  paddingBottom: number;
}",
          "signature": {
            "properties": [
              {
                "description": "Left padding in points",
                "key": "paddingLeft",
                "value": {
                  "name": "number",
                  "required": true,
                },
              },
              {
                "description": "Right padding in points",
                "key": "paddingRight",
                "value": {
                  "name": "number",
                  "required": true,
                },
              },
              {
                "description": "Top padding in points",
                "key": "paddingTop",
                "value": {
                  "name": "number",
                  "required": true,
                },
              },
              {
                "description": "Bottom padding in points",
                "key": "paddingBottom",
                "value": {
                  "name": "number",
                  "required": true,
                },
              },
            ],
          },
          "type": "object",
        },
      },
      "pitch": {
        "description": "The pitch of the map.",
        "required": false,
        "tsType": {
          "name": "number",
        },
      },
      "triggerKey": {
        "description": "Any arbitrary primitive value that, when changed, causes the camera to retry moving to its target
configuration. (Not yet implemented.)",
        "required": false,
        "tsType": {
          "elements": [
            {
              "name": "string",
            },
            {
              "name": "number",
            },
          ],
          "name": "union",
          "raw": "string | number",
        },
      },
      "type": {
        "description": "Allows static check of the data type. For internal use only.",
        "required": false,
        "tsType": {
          "name": "literal",
          "value": "'CameraStop'",
        },
      },
      "zoomLevel": {
        "description": "The zoom level of the map.",
        "required": false,
        "tsType": {
          "name": "number",
        },
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "test-all-imports.tsx" without errors 1`] = `
[
  {
    "description": "This is a TS component with imported stuff",
    "displayName": "ImportedExtendedComponent",
    "methods": [],
    "props": {
      "x": {
        "defaultValue": {
          "computed": false,
          "value": "\\"string\\"",
        },
        "required": false,
      },
      "y": {
        "defaultValue": {
          "computed": false,
          "value": "'otherstring'",
        },
        "required": false,
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "ts-extends-hoc.tsx" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "MyComponent",
    "methods": [],
    "props": {
      "value": {
        "description": "description of value",
        "required": true,
        "tsType": {
          "name": "string",
        },
      },
    },
  },
]
`;

exports[`integration > fixtures > processes component "useCallback-useImperativeHandle.tsx" without errors 1`] = `
[
  {
    "description": "",
    "displayName": "MyComponent",
    "methods": [
      {
        "description": "myMethod description",
        "docblock": "myMethod description",
        "modifiers": [],
        "name": "_myMethod",
        "params": [],
        "returns": null,
      },
    ],
  },
]
`;
